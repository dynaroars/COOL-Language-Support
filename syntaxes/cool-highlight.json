{
	"scopeName": "source.cool",
	"name": "COOL",
	"fileTypes": [
	  "cl"
	],
	"patterns": [
	  {
		"include": "#code"
	  }
	],
	"repository": {
	  "block": {
		"patterns": [
		  {
			"begin": "{",
			"end": "}",
			"name": "meta.block.cool",
			"patterns": [
			  {
				"include": "#code"
			  }
			]
		  }
		]
	  },
	  "builtins": {
		"patterns": [
		  {
			"match": "(Int|String|Bool|IO|Object)",
			"name": "support.class.cool"
		  },
		  {
			"match": "(abort|type_name|copy|out_string|out_int|in_string|in_int|length|concat|substr)",
			"name": "support.function.cool"
		  },
		  {
			"match": "(self|SELF_TYPE)",
			"name": "variable.language.cool"
		  }
		]
	  },
	  "class": {
		"patterns":[
			{
				"match": "class",
				"name":  "storage.type.cool"
			},
			{
				"match": "\\b[A-Z][a-zA-Z0-9_]*\\b",
				"name": "entity.name.type.class.cool"
			}
		]
	  },
	  "code": {
		"patterns": [
		  {
			"include": "#block"
		  },
		  {
			"include": "#builtins"
		  },
		  {
			"include": "#class"
		  },
		  {
			"include": "#comments"
		  },
		  {
			"include": "#constants"
		  },
		  {
			"include": "#keywords"
		  },
		  {
			"include": "#method"
		  }
		]
	  },
	  "line_comment": {
		"begin": "--",
		"end": "$",
		"name": "comment.line.double-dash.cool"
	  },
	  "block_comment": {
		"begin": "\\(\\*",
		"end": "\\*\\)",
		"name": "comment.block.documentation.cool",
		"patterns": [
		{
		"match": "[^*]+",
		"name": "comment.block.content.cool"
		},
		{
		"match": "\\*",
		"name": "comment.block.ignore.cool"
		}
		]
	  },
	  "comments": {
		"patterns": [
		  {
			"include": "#line_comment"
		  },
		  {
			"include": "#block_comment"
		  }
		]
	  },
	  "constants": {
		"patterns": [
		  {
			"match": "\\b(true|false)\\b",
			"name": "constant.language.cool"
		  },
		  {
			"match": "\\b([1-9][0-9]*|0)\\b",
			"name": "constant.numeric.cool"
		  },
		  {
			"begin": "(?<!\\\\)\"",
			"end": "(?<!\\\\)\"",
			"name": "string.quoted.double.cool",
			"patterns": [
			  {
				"match": "\\\\(n|t|b|c|v|f|r)",
				"name": "constant.character.escape.cool"
			  }
			]
		  }
		]
	  },
	  "keywords": {
		"patterns": [
		  {
			"match": "\\b(if|then|else|fi|while|loop|pool|case|esac)\\b",
			"name": "keyword.control.cool"
		  },
		  {
			"match": "\\b(in|inherits|isvoid|let|new|of|not)\\b",
			"name": "keyword.operator.cool"
		  }
		]
	  },
	  "method": {
		"patterns": [
		  {
			"match": "\\b([a-z][A-Za-z0-9_]*)\\s*\\(\\s*(?:([a-z][A-Za-z0-9_]*)\\s*:\\s*([A-Z][A-Za-z0-9_]*))?(?:\\s*,\\s*([a-z][A-Za-z0-9_]*)\\s*:\\s*([A-Z][A-Za-z0-9_]*))*\\s*\\)\\s*:\\s*([A-Z][A-Za-z0-9_]*)\\b",
			"name": "meta.method.cool",
			"captures": {
			  "1": {
				"name": "entity.name.function.cool"
			  },
			  "2": {
				"name": "variable.parameter.cool"
			  },
			  "3": {
				"name": "storage.type.cool"
			  },
			  "4": {
				"name": "entity.name.type.class.cool"
			  },
			  "5": {
				"name": "storage.type.cool"
			  },
			  "6": {
				"name": "storage.type.cool"
			  }
			}
		  }

		]
	  }
	}
  }